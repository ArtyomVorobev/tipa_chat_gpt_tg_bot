import logging
import requests
import redis
import json
from telegram import Update
from telegram.constants import ChatAction
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

import os
from dotenv import load_dotenv
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY")
MISTRAL_ENDPOINT = "https://api.mistral.ai/v1/chat/completions"

# --- Redis ---
r = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_history(user_id):
    data = r.get(f"history:{user_id}")
    return json.loads(data) if data else []


def save_history(user_id, history):
    r.set(f"history:{user_id}", json.dumps(history))


def clear_history(user_id):
    r.delete(f"history:{user_id}")


def mistral_reply(messages):
    headers = {
        "Authorization": f"Bearer {MISTRAL_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "mistral-tiny",  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å
        "messages": messages
    }
    resp = requests.post(MISTRAL_ENDPOINT, headers=headers, json=payload, timeout=60)
    data = resp.json()
    return data["choices"][0]["message"]["content"]


# --- Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å LLM. –ù–∞–ø–∏—à–∏ /new —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n/new ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥\n/help ‚Äî –ø–æ–º–æ—â—å"
    )


async def new_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    clear_history(update.message.from_user.id)
    await update.message.reply_text("–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç. –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø –ø–µ—Ä–µ—Å—ã–ª–∞—é —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ LLM –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é –æ—Ç–≤–µ—Ç—ã.\n"
        "/new ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ (–æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é)\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    )


async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    history = get_history(user_id)
    history.append({"role": "user", "content": text})
    save_history(user_id, history)

    # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)

    # –°–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫–∞
    thinking_msg = await update.message.reply_text("ü§î –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º‚Ä¶")

    try:
        reply = mistral_reply(history)
    except Exception as e:
        logging.error(e)
        await thinking_msg.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API.")
        return

    history.append({"role": "assistant", "content": reply})
    save_history(user_id, history)

    await thinking_msg.edit_text(reply)


# --- Main ---
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("new", new_dialog))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    app.run_polling()


if __name__ == "__main__":
    main()
